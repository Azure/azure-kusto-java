<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">C:\Users\ohbitton\IdeaProjects\azure-kusto-java\ingest\target\kusto-ingest-async-6.0.2-jar-with-dependencies.jar</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="appKey" elementType="Argument">
            <stringProp name="Argument.name">appKey</stringProp>
            <stringProp name="Argument.desc">secret of app key</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__P(appKey,1)}</stringProp>
          </elementProp>
          <elementProp name="appId" elementType="Argument">
            <stringProp name="Argument.name">appId</stringProp>
            <stringProp name="Argument.value">${__P(appId,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="cluster" elementType="Argument">
            <stringProp name="Argument.name">cluster</stringProp>
            <stringProp name="Argument.value">${__P(cluster,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="tenant" elementType="Argument">
            <stringProp name="Argument.name">tenant</stringProp>
            <stringProp name="Argument.value">${__P(tenant,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="queryTable" elementType="Argument">
            <stringProp name="Argument.name">queryTable</stringProp>
            <stringProp name="Argument.value">${__P(queryTable,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="database" elementType="Argument">
            <stringProp name="Argument.name">database</stringProp>
            <stringProp name="Argument.value">${__P(database,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ingestCluster" elementType="Argument">
            <stringProp name="Argument.name">ingestCluster</stringProp>
            <stringProp name="Argument.value">${__P(ingestCluster,1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Query" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadCountQuery,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUpSecondsQuery,1)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Query" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.microsoft.azure.kusto.data.*;
import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;
import com.microsoft.azure.kusto.data.exceptions.DataClientException;
import com.microsoft.azure.kusto.data.exceptions.DataServiceException;
import com.microsoft.azure.kusto.data.http.HttpClientProperties;
import org.apache.commons.lang3.time.StopWatch;

String databaseName = bsh.args[5];
String testName = &quot;simple query test &quot;+ ${__threadNum};

ConnectionStringBuilder csb = ConnectionStringBuilder.createWithAadApplicationCredentials(
      bsh.args[2],
      bsh.args[1],
    	 bsh.args[0],
      bsh.args[3]);

HttpClientProperties properties = HttpClientProperties.builder()
           .keepAlive(true)
           .maxConnectionsTotal(40)
           .build();

KustoOperationResult results;
Client client = ClientFactory.createClient(csb, properties);
String query = &quot;set notruncation;&quot; + bsh.args[4];
StopWatch stopWatch = new StopWatch();
stopWatch.start();

String cid = &quot;KJC.executeQueryTest;&quot; + UUID.randomUUID();
ClientRequestProperties clientRequestProperties = new ClientRequestProperties();
clientRequestProperties.setClientRequestId(cid);

try {
	results = client.executeQuery(databaseName, query, clientRequestProperties);
} catch (Throwable e){
	stopWatch.stop();
	long timeConvertedToJavaObj = stopWatch.getTime();
     log.error(&quot;Failed &quot; + testName + &quot; cid: &quot; + cid + &quot;. after: &quot; + timeConvertedToJavaObj + &quot; ms ,error: &quot; + e.getMessage(), e);
  	throw new RuntimeException(e);
}


stopWatch.stop();
long timeConvertedToJavaObj = stopWatch.getTime();
log.warn(&quot;Finished simple query successfully after: &quot; + timeConvertedToJavaObj + &quot; ms&quot;);
</stringProp>
          <stringProp name="BeanShellSampler.parameters">${appKey} ${appId} ${cluster} ${tenant} ${queryTable} ${database}</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Streaming-Query" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <stringProp name="ThreadGroup.num_threads">${__P(threadCountQueryStreaming,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(rampUpSecondsQueryStreaming,1)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Query - streaming" enabled="true">
          <stringProp name="BeanShellSampler.query">
import com.microsoft.azure.kusto.data.StreamingClient;
import com.microsoft.azure.kusto.data.ClientRequestProperties;
import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;
import com.microsoft.azure.kusto.data.ClientFactory;
import com.microsoft.azure.kusto.data.exceptions.DataClientException;
import com.microsoft.azure.kusto.data.exceptions.DataServiceException;
import java.io.*;
import org.apache.commons.lang3.time.StopWatch;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.stream.Stream;
import com.microsoft.azure.kusto.data.http.HttpClientProperties;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Calendar;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

String databaseName = bsh.args[5];
String testName = &quot;Streaming query test &quot;+ ${__threadNum};
ConnectionStringBuilder csb = ConnectionStringBuilder.createWithAadApplicationCredentials(
       bsh.args[2],
      bsh.args[1],
    	 bsh.args[0],
      bsh.args[3]);
           
HttpClientProperties properties = HttpClientProperties.builder()
           .keepAlive(true)
           .maxConnectionsTotal(40)
           .build();
log.info(&quot;Start &quot; + testName);
final StreamingClient streamingClient = ClientFactory.createStreamingClient(csb, properties);

Runnable runnable = new Runnable() {
      public void run() {
           StopWatch stopWatch = new StopWatch();
           stopWatch.start();
           InputStream is = null;
           BufferedReader br = null;

           String cid = &quot;KJC.executeStreamingTest;&quot; + UUID.randomUUID();
           ClientRequestProperties clientRequestProperties = new ClientRequestProperties();
           clientRequestProperties.setClientRequestId(cid);

           try {
               try {
               	// Full table takes 7s if no stress
               	// Maybe test also for best time vs best time
                   String query = &quot;set notruncation;&quot; + bsh.args[4];
                   is = streamingClient.executeStreamingQuery(databaseName, query, clientRequestProperties);
                   log.info(&quot;start query: &quot; + testName);

                   br = new BufferedReader(new InputStreamReader(is));

                   char[] buffer = new char[4194304];
                   String streamedLine;
                   int count = 0;
                   int read;
                   while ((read = br.read(buffer)) &gt; -1) {
                       count++;
                       streamedLine = String.valueOf(buffer, 0, read);
                   }
               } finally {
                   if (is != null) {
                       is.close();
                   }
                   if (br != null) {
                       br.close();
                   }
               }
           } catch (java.lang.Exception e) {

	         stopWatch.stop();
              long timeConvertedToJavaObj = stopWatch.getTime();

               log.error(&quot;Failed &quot; + testName + &quot; cid: &quot; + cid + &quot;. after: &quot; + timeConvertedToJavaObj + &quot; ms ,error: &quot; + e.getMessage(), e);
               throw new RuntimeException();
           }

           stopWatch.stop();
           long timeConvertedToJavaObj = stopWatch.getTime();
           log.warn(&quot;Finished streaming query successfully after: &quot; + timeConvertedToJavaObj + &quot; ms&quot;);
       }
};
// Using Executor just to make try to invoke the TLS bug
ExecutorService executorService = Executors.newCachedThreadPool();
int size = 2;
CompletableFuture[] futures = new CompletableFuture[size];

try{

	for (int i = 0; i &lt; size; i++) {
	  futures[i] = (CompletableFuture.runAsync(runnable, executorService));
	}
} finally{
	 try {

			CompletableFuture.allOf(futures).join();
       } catch (Throwable e) {
       	log.error(&quot;failed run&quot;,e);
           throw new RuntimeException(e);
       }
	executorService.shutdown();
}
</stringProp>
          <stringProp name="BeanShellSampler.parameters">${appKey} ${appId} ${cluster} ${tenant} ${queryTable} ${database}</stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">true</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Upload test" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <stringProp name="ThreadGroup.num_threads">${__P(ingestThreadCount,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(ingestRampUpSeconds,1)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Ingest-test-upload" enabled="true">
          <stringProp name="BeanShellSampler.query">import com.microsoft.azure.kusto.ingest.source.StreamSourceInfo;
import com.microsoft.azure.kusto.ingest.IngestClientFactory;
import com.microsoft.azure.kusto.ingest.IngestionProperties;
import com.microsoft.azure.kusto.ingest.QueuedIngestClient;
import com.microsoft.azure.kusto.ingest.result.IngestionResult;
import com.microsoft.azure.kusto.ingest.result.IngestionStatus;
import com.microsoft.azure.kusto.ingest.result.OperationStatus;
import com.microsoft.azure.kusto.ingest.source.BlobSourceInfo;
import com.microsoft.azure.kusto.data.http.HttpClientProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.apache.commons.lang3.time.StopWatch;

import com.microsoft.azure.kusto.data.*;
import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;

import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Calendar;
import java.util.UUID;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.ZoneId;


String testName = &quot;Upload ingest test, thread:&quot;+ ${__threadNum};
log.info(&quot;Start &quot; + testName);
String databaseName = bsh.args[5];
ConnectionStringBuilder engineCsb = ConnectionStringBuilder.createWithAadApplicationCredentials(
      bsh.args[2],
      bsh.args[1],
    	 bsh.args[0],
      bsh.args[3]);

ConnectionStringBuilder dmCsb = ConnectionStringBuilder.createWithAadApplicationCredentials(
     bsh.args[4],
      bsh.args[1],
    	 bsh.args[0],
      bsh.args[3]);
Client cslClient = ClientFactory.createClient(engineCsb, (HttpClientProperties) null);
HttpClientProperties properties = HttpClientProperties.builder()
      .keepAlive(true)
      .maxConnectionsTotal(40)
      .build();


ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); // Use your desired output stream
Random random = new Random();
int rows = 100000;
for (int i = 0; i &lt; rows; i++) {
  String id = UUID.randomUUID().toString();
  String id2 = UUID.randomUUID().toString();
  int randomNumber = random.nextInt(100);
  String row = String.format(&quot;%s,%s.%s\r\n&quot;,new String[]{id,String.valueOf(randomNumber),id2});
  byte[] byteData = row.getBytes();
  if (i == rows -1){
     outputStream.write(byteData, 0,byteData.length - &quot;\r\n&quot;.getBytes().length);
 } else {
     outputStream.write(byteData);
 }

}
outputStream.close();
ByteArrayInputStream input = new ByteArrayInputStream(outputStream.toByteArray());

KustoOperationResult results;
IngestionResult ingestionResult;
String tableName = &quot;UploadTest&quot; + new SimpleDateFormat(&quot;yyyy_MM_dd_hh_mm_ss_SSS&quot;).format(Calendar.getInstance().getTime());
StopWatch stopWatch = null;
try {
  String tableColumns = &quot;(colA: string, colB: string)&quot;;
  cslClient.executeToJsonResult(databaseName, &quot;.create table &quot; + tableName + &quot; &quot; + tableColumns, null);

  LocalDateTime time = LocalDateTime.ofInstant(Instant.now(), ZoneId.of(&quot;UTC&quot;)).plusDays(1);
         String expiryDate = DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(time);
         String autoDeletePolicy = &quot;@&apos;{ \&quot;ExpiryDate\&quot; : \&quot;&quot; + expiryDate + &quot;\&quot;, \&quot;DeleteIfNotEmpty\&quot;: true }&apos;&quot;;
         cslClient.executeToJsonResult(databaseName, String.format(&quot;.alter table %s policy auto_delete %s&quot; ,new String[]{tableName, autoDeletePolicy}), null);

  stopWatch = new StopWatch();
  stopWatch.start();
  QueuedIngestClient client = IngestClientFactory.createClient(dmCsb, properties);
  try {
      IngestionProperties ingestionProperties = new IngestionProperties(databaseName, tableName);
      ingestionResult = client.ingestFromStream(new StreamSourceInfo(input), ingestionProperties);
  } finally {
      client.close();
  }
  IngestionStatus ingestionStatus = ingestionResult.getIngestionStatusCollection().get(0);  //TODO: block here?
  if (ingestionStatus.status != OperationStatus.Queued){
      throw new Exception(&quot;Failed upload&quot; + ingestionStatus.errorCodeString);
  }

  stopWatch.stop();
  long timeConvertedToJavaObj = stopWatch.getTime();
  log.warn(&quot;Finished queuing upload ingest successfully after: &quot; + timeConvertedToJavaObj + &quot; ms&quot;);

  try{
  	cslClient.executeToJsonResult(databaseName, &quot;.drop table &quot; + tableName + &quot; ifexists&quot;, null);
  } catch (Exception e) {
  }
} catch (Throwable e) {
	if (stopWatch != null) {
		stopWatch.stop();
		Long timeConvertedToJavaObj = stopWatch.getTime();
		log.error(&quot;failed with table: &quot; + tableName + &quot;, after: &quot; + timeConvertedToJavaObj + &quot; ms&quot;, e);
	} else {
		log.error(&quot;failed with table: &quot; + tableName + &quot;, after: &quot;, e);
	}

	try{
	  	cslClient.executeToJsonResult(databaseName, &quot;.drop table &quot; + tableName + &quot; ifexists&quot;, null);
	  } catch (Exception e) {
		log.error(&quot;failed to drop table: &quot; + tableName, e);
	  }
	ResponseMessage =&quot;Failed dropping table&quot;;
	ResponseCode = 500;
	IsSuccess = false;
}</stringProp>
          <stringProp name="BeanShellSampler.parameters">${appKey} ${appId} ${cluster} ${tenant} ${ingestCluster} ${database}</stringProp>
        </BeanShellSampler>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Queue test - Table report " enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <stringProp name="ThreadGroup.num_threads">${__P(queueThreadCount,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(queueRampUpSeconds,1)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="test ingest with table report" enabled="true">
          <stringProp name="TestPlan.comments">Testing the table report part - so using a small blob for that</stringProp>
          <stringProp name="BeanShellSampler.query">import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import com.microsoft.azure.kusto.ingest.IngestClientFactory;
import com.microsoft.azure.kusto.ingest.IngestionProperties;
import com.microsoft.azure.kusto.ingest.QueuedIngestClient;
import com.microsoft.azure.kusto.ingest.result.IngestionResult;
import com.microsoft.azure.kusto.ingest.result.IngestionStatus;
import com.microsoft.azure.kusto.ingest.result.OperationStatus;
import com.microsoft.azure.kusto.ingest.source.BlobSourceInfo;
import org.apache.commons.lang3.time.StopWatch;

import com.microsoft.azure.kusto.data.*;
import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;
import com.microsoft.azure.kusto.data.http.HttpClientProperties;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Calendar;
import java.util.List;
import java.util.UUID;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.ZoneId;
import java.time.Instant;

String testName = &quot;TableReport ingest test, thread:&quot;+ ${__threadNum};
log.info(&quot;Start &quot; + testName);
//int timeoutInSec = 150; use if we do want to confirm ingestion
// We don&apos;t set here ingestion batching policy - one should configure beforehand at database
String databaseName = bsh.args[5];
ConnectionStringBuilder engineCsb = ConnectionStringBuilder.createWithAadApplicationCredentials(
	  bsh.args[2],
      bsh.args[1],
    	 bsh.args[0],
      bsh.args[3]);

ConnectionStringBuilder dmCsb = ConnectionStringBuilder.createWithAadApplicationCredentials(
	bsh.args[4],
      bsh.args[1],
    	 bsh.args[0],
      bsh.args[3]);
Client cslClient = ClientFactory.createClient(engineCsb, (HttpClientProperties) null);


KustoOperationResult results;
IngestionResult ingestionResult;
String tableName = &quot;ReportTest&quot; + new SimpleDateFormat(&quot;yyyy_MM_dd_hh_mm_ss_SSS&quot;).format(Calendar.getInstance().getTime());
StopWatch stopWatch = null;
int size = 16;
try{
try {
	String tableColumns = &quot;(colA: string)&quot;;
	cslClient.executeToJsonResult(databaseName, &quot;.create table &quot; + tableName + &quot; &quot; + tableColumns, null);
	LocalDateTime time = LocalDateTime.ofInstant(Instant.now(), ZoneId.of(&quot;UTC&quot;)).plusDays(1);
       String expiryDate = DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(time);
       String autoDeletePolicy = &quot;@&apos;{ \&quot;ExpiryDate\&quot; : \&quot;&quot; + expiryDate + &quot;\&quot;, \&quot;DeleteIfNotEmpty\&quot;: true }&apos;&quot;;
       cslClient.executeToJsonResult(databaseName, String.format(&quot;.alter table %s policy auto_delete %s&quot; ,new String[]{tableName, autoDeletePolicy}), null);

	
	QueuedIngestClient client = IngestClientFactory.createClient(dmCsb, null);
	stopWatch = new StopWatch();
     stopWatch.start();
	try {
		// Expect to fail on the ingest itself on the unknown blobs - do we fetch size ?
		 IngestionProperties ingestionProperties = new IngestionProperties(databaseName, tableName);
		 ingestionProperties.setReportMethod(IngestionProperties.IngestionReportMethod.TABLE);
		 ingestionProperties.setReportLevel(IngestionProperties.IngestionReportLevel.FAILURES_AND_SUCCESSES);
          for (int i = 0; i &lt; size; i++) {
			 ingestionResult = client.ingestFromBlob(new BlobSourceInfo(&quot;https://sparkwesteu.blob.core.windows.net/exter/ohad_1_ce43edbeea174c5eaf06bb9315def4b6.csv.gz?sv=2023-01-03&amp;st=2025-06-30T11%3A59%3A36Z&amp;se=2026-07-01T11%3A59%3A00Z&amp;sr=b&amp;sp=r&amp;sig=7k9c19TRbRAgFCO5lK7cm1Pf0KGVp%2BuGbPb1V3GL%2Fso%3D&quot;), ingestionProperties);
		       // Instead of checking the result - just see the perf of get status collection
		       OperationStatus status = ingestionResult.getIngestionStatusCollection().get(0).status;
			if (status != OperationStatus.Pending){
				throw new Exception(&quot;Test Failed to ingest blob, ingestion status is:&quot; + status);
			}
			log.info(&quot;successfully queued &quot; +  ingestionResult.getIngestionStatusCollection().get(0).ingestionSourceId);
			// Just add some calls for testing
			ingestionResult.getIngestionStatusCollection().get(0).status;
	}
 	 } finally {
		client.close();
	}

	stopWatch.stop();
	long timeConvertedToJavaObj = stopWatch.getTime();
	log.warn(&quot;Finished queue and update table &apos;&quot; + size + &quot;&apos; times succesfully after: &quot; + timeConvertedToJavaObj + &quot; ms&quot;);

//
//     while (ingestionResult.getIngestionStatusCollection().get(0).status == OperationStatus.Pending &amp;&amp; timeoutInSec &gt; 0) {
//                Thread.sleep(1000);
//                timeoutInSec -= 1;
//            }

//	ObjectMapper objectMapper = Utils.getObjectMapper();
//	IngestionStatus ingestionStatus = ingestionResult.getIngestionStatusCollection().get(0);
//
//	String resultAsJson = objectMapper.writeValueAsString(ingestionStatus);
//	if (!ingestionStatus.status.equals(OperationStatus.Succeeded)) {
//	 log.error(&quot;failed &quot; +testName +&quot;: &quot; + resultAsJson);
//	 throw new Exception(&quot;Test Failed with non successfull status&quot;);
//	}
//	log.info(&quot;Successful ingstion&quot; + testName + &quot;\n Status:&quot;+resultAsJson);
//	 try{
	  	cslClient.executeToJsonResult(databaseName, &quot;.drop table &quot; + tableName + &quot; ifexists&quot;, null);
//	  } catch (Exception e) {
//
//	  }
} catch (Throwable e) {
	if (stopWatch != null) {
		stopWatch.stop();
		Long timeConvertedToJavaObj = stopWatch.getTime();
		log.error(&quot;failed with table: &quot; + tableName + &quot;, after: &quot; + timeConvertedToJavaObj + &quot; ms&quot;, e);
	} else {
		log.error(&quot;failed with table: &quot; + tableName + &quot;, after: &quot;, e);
	}

	 try{
	  	cslClient.executeToJsonResult(databaseName, &quot;.drop table &quot; + tableName + &quot; ifexists&quot;, null);
      } catch (Exception e) {
      }
	log.info(&quot;table : &quot; + tableName +&quot; dropped&quot;);
	ResponseMessage =&quot;Failed dropping table&quot;;
	IsSuccess = false;
	ResponseCode = 500;
}
}catch(Throwable bshte) {
	// For tracing - maybe
	IsSuccess = false;
}
</stringProp>
          <stringProp name="BeanShellSampler.parameters">${appKey} ${appId} ${cluster} ${tenant} ${ingestCluster} ${database}</stringProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Streaming ingestion" enabled="true">
        <boolProp name="ThreadGroup.delayedStart">true</boolProp>
        <stringProp name="ThreadGroup.num_threads">${__P(ingestThreadCount,1)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(ingestRampUpSeconds,1)}</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="test streaming ingestion" enabled="true">
          <stringProp name="TestPlan.comments">Testing the table report part - so using a small blob for that</stringProp>
          <stringProp name="BeanShellSampler.query">

import com.microsoft.azure.kusto.ingest.IngestClientFactory;
import com.microsoft.azure.kusto.ingest.IngestionProperties;
import com.microsoft.azure.kusto.ingest.result.IngestionResult;
import com.microsoft.azure.kusto.ingest.result.IngestionStatus;
import com.microsoft.azure.kusto.ingest.result.OperationStatus;
import com.microsoft.azure.kusto.ingest.source.StreamSourceInfo;
import com.microsoft.azure.kusto.ingest.StreamingIngestClient;
import com.microsoft.azure.kusto.data.http.HttpClientProperties;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.microsoft.azure.kusto.data.*;
import com.microsoft.azure.kusto.data.auth.ConnectionStringBuilder;

import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.Calendar;
import java.util.List;
import java.util.UUID;

import org.apache.commons.lang3.time.StopWatch;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.ZoneId;

String testName = &quot;TableReport ingest test, thread:&quot;+ ${__threadNum};
log.info(&quot;Start &quot; + testName);

String databaseName = bsh.args[4];

ConnectionStringBuilder engineCsb = ConnectionStringBuilder.createWithAadApplicationCredentials(
	 bsh.args[2],
      bsh.args[1],
    	 bsh.args[0],
      bsh.args[3]);

Client cslClient = ClientFactory.createClient(engineCsb, (HttpClientProperties) null);

KustoOperationResult results;
IngestionResult ingestionResult;
ByteArrayOutputStream outputStream = new ByteArrayOutputStream(); // Use your desired output stream
Random random = new Random();
int rows = 40000;
for (int i = 0; i &lt; rows; i++) {
  String id = UUID.randomUUID().toString();
  String id2 = UUID.randomUUID().toString();
  int randomNumber = random.nextInt(100);
  String row = String.format(&quot;%s,%s.%s\r\n&quot;,new String[]{id,String.valueOf(randomNumber),id2});
  byte[] byteData = row.getBytes();
  if (i == rows -1){
     outputStream.write(byteData, 0,byteData.length - &quot;\r\n&quot;.getBytes().length);
 } else {
     outputStream.write(byteData);
 }
}

outputStream.close();
ByteArrayInputStream input = new ByteArrayInputStream(outputStream.toByteArray());
String tableName = &quot;StreamingIngest&quot; + new SimpleDateFormat(&quot;yyyy_MM_dd_hh_mm_ss_SSS&quot;).format(Calendar.getInstance().getTime());
StopWatch stopWatch = null;
try {
	String tableColumns = &quot;(colA: string, colB: string)&quot;;
	cslClient.executeToJsonResult(databaseName, &quot;.create table &quot; + tableName + &quot; &quot; + tableColumns, null);
     cslClient.executeToJsonResult(databaseName, &quot;.clear database cache streamingingestion schema&quot;, null);
LocalDateTime time = LocalDateTime.ofInstant(Instant.now(), ZoneId.of(&quot;UTC&quot;)).plusDays(1);

       String expiryDate = DateTimeFormatter.ISO_LOCAL_DATE_TIME.format(time);

       String autoDeletePolicy = &quot;@&apos;{ \&quot;ExpiryDate\&quot; : \&quot;&quot; + expiryDate + &quot;\&quot;, \&quot;DeleteIfNotEmpty\&quot;: true }&apos;&quot;;

       cslClient.executeToJsonResult(databaseName, String.format(&quot;.alter table %s policy auto_delete %s&quot; ,new String[]{tableName, autoDeletePolicy}), null);



cslClient.executeToJsonResult(databaseName, &quot;.clear database cache streamingingestion schema&quot;, null);
	 stopWatch = new StopWatch();
     stopWatch.start();
     StreamingIngestClient streamingIngestClient = IngestClientFactory.createStreamingIngestClient(engineCsb);
	try {
	 IngestionProperties ingestionProperties = new IngestionProperties(databaseName, tableName);
      ingestionResult = streamingIngestClient.ingestFromStream(new StreamSourceInfo(input), ingestionProperties);
	} finally {
		streamingIngestClient.close();
	}

	ObjectMapper objectMapper = Utils.getObjectMapper();
	IngestionStatus ingestionStatus = ingestionResult.getIngestionStatusCollection().get(0);

	String resultAsJson = objectMapper.writeValueAsString(ingestionStatus);

     if (!ingestionResult.getIngestionStatusCollection().get(0).status.equals(OperationStatus.Succeeded)) {
	 log.error(&quot;failed&quot; +testName +&quot;: &quot; + resultAsJson);
	 throw new Exception(&quot;Test Failed with non successfull status&quot;);
	}

	stopWatch.stop();
     Long timeConvertedToJavaObj = stopWatch.getTime();
     // Taking 11s for row count of 40000
	log.warn(&quot;Finished streaming ingest successfully after: &quot; + timeConvertedToJavaObj + &quot; ms&quot; + &quot;\n Status:&quot;+resultAsJson);

	 try{
	  	cslClient.executeToJsonResult(databaseName, &quot;.drop table &quot; + tableName + &quot; ifexists&quot;, null);
      } catch (Exception e) {
      }
} catch (Throwable e) {
	if (stopWatch != null) {
		stopWatch.stop();
		Long timeConvertedToJavaObj = stopWatch.getTime();
		log.error(&quot;failed with table: &quot; + tableName + &quot;, after: &quot; + timeConvertedToJavaObj + &quot; ms&quot;, e);
	} else {
		log.error(&quot;failed with table: &quot; + tableName + &quot;, after: &quot;, e);
	}


 	try{
	  	cslClient.executeToJsonResult(databaseName, &quot;.drop table &quot; + tableName + &quot; ifexists&quot;, null);
      } catch (Exception e) {
      		log.error(&quot;failed to drop table: &quot; + tableName, e);	
      
      }
	ResponseMessage =&quot;Failed dropping table&quot;;
	ResponseCode = 500;
	IsSuccess = false;
}

</stringProp>
          <stringProp name="BeanShellSampler.parameters">${appKey} ${appId} ${cluster} ${tenant} ${database}</stringProp>
        </BeanShellSampler>
        <hashTree>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
